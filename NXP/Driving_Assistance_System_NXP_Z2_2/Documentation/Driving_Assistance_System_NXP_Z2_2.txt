=============================================================================
List of generated methods in project: Driving_Assistance_System_NXP_Z2_2

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_SetOutputBuffer -This function configures the output buffer
   - pin_mux_PINS_DRV_SetInputBuffer -This function configures the input buffer
   - pin_mux_PINS_DRV_ConfigIntFilterClock -This function configures the interrupt filter clock prescaler
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "smpu1"     (component smpu)
   - smpu1_SMPU_DRV_Init -Initializes system memory protection unit by setting the access configurations of all available 
                masters, process identifier and the memory location for the given regions and activate module finally.
   - smpu1_SMPU_DRV_Deinit -De-initializes system memory protection unit by reseting all regions to default and disable module.
   - smpu1_SMPU_DRV_GetDefaultRegionConfig -Gets default region configuration. Grants all access rights for masters; disable 
                PID and cache; unlock region descriptor.
   - smpu1_SMPU_DRV_SetRegionConfig -Configures the region descriptor. Updates the access configuration of all available 
                masters, process identifier and memory location in a given region.
   - smpu1_SMPU_DRV_SetRegionProcessId -Configures the region process identifier.
   - smpu1_SMPU_DRV_SetRegionAddr -Configures the region start and end address.
   - smpu1_SMPU_DRV_EnableRegion -Enables/Disables region descriptor.
   - smpu1_SMPU_DRV_SetMasterAccessRights -Configures access permission of master in the region.
   - smpu1_SMPU_DRV_SetRegionLockConfig -Sets the region lock configuration.
   - smpu1_SMPU_DRV_GetRegionLockInfo -Reports the region lock status.
   - smpu1_SMPU_DRV_GetDetailErrorInfo -Checks and gets the access error detail information if the error caused by master.

Module "stm1"      (component stm)
   - stm1_STM_DRV_Init -Initializes the STM module
   - stm1_STM_DRV_Deinit -De-Initializes the STM module
   - stm1_STM_DRV_GetDefaultConfig -Gets the default configuration structure of STM with default settings
   - stm1_STM_DRV_InitChannel -Initializes the STM channel module with a structure
   - stm1_STM_DRV_ConfigChannel -Configures the STM channel module with parameters
   - stm1_STM_DRV_EnableChannel -Enables the channel selected
   - stm1_STM_DRV_DisableChannel -Disables the channel selected
   - stm1_STM_DRV_SetStartValueCount -Sets start-value for Counter register
   - stm1_STM_DRV_StartTimer -Starts timer counter
   - stm1_STM_DRV_StopTimer -Stops timer counter
   - stm1_STM_DRV_ComputeTicksByUs -Computes the number of ticks from microseconds
   - stm1_STM_DRV_IncrementTicks -Increases the number of ticks in compare register
   - stm1_STM_DRV_GetStatusFlags -Gets status of timer interrupt flag
   - stm1_STM_DRV_ClearStatusFlags -Clears channel interrupt flag
   - stm1_STM_DRV_GetCounterValue -Gets current counter module

Module "pwm_pal1"  (component pwm_pal)
   - pwm_pal1_PWM_Init -Initialize PWM channels based on config parameter.
   - pwm_pal1_PWM_UpdateDuty -Update duty cycle. The measurement unit for duty is clock ticks.
   - pwm_pal1_PWM_UpdatePeriod -Update period for specific a specific channel. This function changes period for all channels 
                which shares the timebase with targeted channel.
   - pwm_pal1_PWM_OverwriteOutputChannels -This function change the output value for some channels. channelsMask select which 
                channels will be overwrite, each bit filed representing one channel: 1 - channel is controlled by 
                channelsValues, 0 - channel is controlled by pwm. channelsValues select output values to be write on 
                corresponding channel.
   - pwm_pal1_PWM_Deinit -Uninitialised PWM instance.

Module "pwm_pal2"  (component pwm_pal)
   - pwm_pal2_PWM_Init -Initialize PWM channels based on config parameter.
   - pwm_pal2_PWM_UpdateDuty -Update duty cycle. The measurement unit for duty is clock ticks.
   - pwm_pal2_PWM_UpdatePeriod -Update period for specific a specific channel. This function changes period for all channels 
                which shares the timebase with targeted channel.
   - pwm_pal2_PWM_OverwriteOutputChannels -This function change the output value for some channels. channelsMask select which 
                channels will be overwrite, each bit filed representing one channel: 1 - channel is controlled by 
                channelsValues, 0 - channel is controlled by pwm. channelsValues select output values to be write on 
                corresponding channel.
   - pwm_pal2_PWM_Deinit -Uninitialised PWM instance.

Module "uart_pal1" (component uart_pal)
   - uart_pal1_UART_GetDefaultConfig -Gets the default configuration structure.
   - uart_pal1_UART_Init -Initializes the uart module.
   - uart_pal1_UART_Deinit -De-initializes the uart module.
   - uart_pal1_UART_SetBaudRate -Configures the UART baud rate.
   - uart_pal1_UART_GetBaudRate -Returns the UART baud rate.
   - uart_pal1_UART_SendDataBlocking -Perform a blocking UART transmission.
   - uart_pal1_UART_SendData -Perform a non-blocking UART transmission.
   - uart_pal1_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - uart_pal1_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - uart_pal1_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - uart_pal1_UART_ReceiveData -Perform a non-blocking UART reception.
   - uart_pal1_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - uart_pal1_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - uart_pal1_UART_SetRxBuffer -Provide a buffer for receiving data.
   - uart_pal1_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA virtualChannel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA virtualChannel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA virtualChannel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the virtualChannel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the virtualChannel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the virtualChannel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the virtualChannel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the virtualChannel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current virtualChannel.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "can_pal1"  (component can_pal)
   - can_pal1_CAN_Init -Initializes the CAN module.
   - can_pal1_CAN_Deinit -De-initializes the CAN module.
   - can_pal1_CAN_SetBitrate -Configures the CAN bitrate.
   - can_pal1_CAN_GetBitrate -Returns the CAN bitrate.
   - can_pal1_CAN_ConfigTxBuff -Configures a buffer for transmission.
   - can_pal1_CAN_ConfigRemoteResponseBuff -Configures a transmit message buffer for remote frame response.
   - can_pal1_CAN_ConfigRxBuff -Configures a buffer for reception.
   - can_pal1_CAN_Send -Sends a CAN frame using the specified buffer.
   - can_pal1_CAN_SendBlocking -Sends a CAN frame using the specified buffer, in a blocking manner.
   - can_pal1_CAN_Receive -Receives a CAN frame using the specified message buffer.
   - can_pal1_CAN_ReceiveBlocking -Receives a CAN frame using the specified buffer, in a blocking manner.
   - can_pal1_CAN_AbortTransfer -Ends a non-blocking CAN transfer early.
   - can_pal1_CAN_SetRxFilter -Configures an ID filter for a specific reception buffer.
   - can_pal1_CAN_GetTransferStatus -Returns the state of the previous CAN transfer.
   - can_pal1_CAN_InstallEventCallback -Installs a callback function for the IRQ handler.
   - can_pal1_CAN_GetDefaultConfig -Returns the default values for the CAN module.

Module "Cpu"       (component MPC5748G_324)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
